#!/usr/bin/env python

import argparse
import os
import subprocess
import json

def find_compilation_databases(build_path):
    for root, dirs, entries in os.walk(os.path.abspath(build_path)):
        for entry in entries:
            if entry == 'compile_commands.json':
                yield os.path.join(root, entry)

def create_xargs_file(compilation_database):
    with open(compilation_database) as fp:
        json_data = json.load(fp)

    xargs_commands = []
    cxx_flags = os.getenv('CXX_FLAGS')
    for entry in json_data:
        if '/swift/stdlib/' in entry['file']:
            continue

        command = entry['command'].split()

        # Make sure we have a Clang/Clang++ compiler
        binary = os.path.basename(command[0])
        if binary == 'cc':
            binary = 'clang'
        elif binary == 'c++':
            binary = 'clang++'
        command[0] = binary

        # Replace -c with -E
        c_index = command.index('-c')
        command[c_index] = '-E'

        # Replace -o /path/to/foo.o with -o /dev/null
        o_index = command.index('-o')
        object_file = os.path.join(entry['directory'], command[o_index+1])
        command[o_index+1] = '/dev/null'

        command.insert(1, cxx_flags)

        # We only add commands whose object file exists, in case the
        # original command didn't actually run as part of the build process.
        if os.path.isfile(object_file):
            xargs_commands.append(' '.join(command))

    root = os.path.dirname(compilation_database)
    xargs_file = os.path.join(root, 'compilation_commands.xargs')
    with open(xargs_file, 'w') as fp:
        fp.write('\n'.join(xargs_commands))

    return xargs_file

def call_xargs(xargs_file):
    os.chdir(os.path.dirname(xargs_file))
    xargs_cmd = [
        'xargs',
        '--arg-file={}'.format(xargs_file),
        '--max-procs=4', '--replace', '--verbose',
        '/bin/sh', '-c', '{}'
    ]
    try:
        subprocess.check_call(xargs_cmd)
    except Exception as exc:
        print(str(exc))

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("--build-path", required=True,
                        help="Path to look for compilation databases.")
    args = parser.parse_args()

    # 1 - Find every compilation database in the build directory
    compilation_databases = find_compilation_databases(args.build_path)

    # 2 - Create the file containing the commands we want to pass to xargs(1)
    xargs_files = [
        create_xargs_file(compilation_database)
        for compilation_database in compilation_databases
    ]

    # 3 - Execute each xargs file
    for xargs_file in xargs_files:
        call_xargs(xargs_file)
